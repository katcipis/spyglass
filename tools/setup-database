#!/usr/bin/env python

import sys
import asyncio
import asyncpg
import datetime

from config.loaders import load_postgresql_config


async def main():
    cfg, err = load_postgresql_config()
    if err is not None:
        print(err)
        sys.exit(1)

    conn = await asyncpg.connect(cfg.uri)
    # # Execute a statement to create a new table.
    try:
        print("creating health error kind enum")
        await conn.execute(health_error_kind_enum())
    except asyncpg.exceptions.DuplicateObjectError:
        print("health check error_kind enum already exists")

    try:
        print("creating health check table")
        await conn.execute(health_check_table())
    except asyncpg.exceptions.DuplicateTableError:
        print("health check table already exists")

    await conn.close()


def health_error_kind_enum():
    return """
CREATE TYPE error_kind AS ENUM ('unknown', 'http', 'regex', 'timeout');
    """

def health_check_table():
    return """
CREATE TABLE spyglass_health_status (
    timestamp        timestamp without time zone,
    website          text,
    path             text,
    healthy          boolean,
    status_code      smallint,
    response_time_ms integer,
    error_kind       error_kind,
    error_details    text,
    PRIMARY KEY(timestamp, website, path)
);
    """

if __name__ == "__main__":
    asyncio.run(main())
